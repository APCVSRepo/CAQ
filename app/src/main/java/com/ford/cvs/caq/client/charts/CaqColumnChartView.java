package com.ford.cvs.caq.client.charts;

import android.content.Context;
import android.util.AttributeSet;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.AbstractChartView;
import lecho.lib.hellocharts.view.ColumnChartView;

public class CaqColumnChartView extends ColumnChartView {

    private Axis axisY = null;
    private ColumnChartData chartData = null;

    public CaqColumnChartView(Context context) {
        super(context);
        init();
    }

    public CaqColumnChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public CaqColumnChartView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init();
    }

    private void init(){
        try {
            Field field = AbstractChartView.class.getDeclaredField("chartComputator");
            field.setAccessible(true);
            field.set(this, new CaqChartComputator());
            field.setAccessible(false);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        CaqColumnChartRenderer myRender = new CaqColumnChartRenderer(getContext(), this, this);
        myRender.setMaxY(400);
        setChartRenderer(myRender);

        setZoomEnabled(false);
        setScrollEnabled(true);

        initAxisY();
        chartData = new ColumnChartData();
        chartData.setFillRatio(0.2f);
        chartData.setAxisYLeft(axisY);
    }

    private void initAxisY(){
        List<AxisValue> yAxisValue = new ArrayList<AxisValue>();
        int[] value = {0, 70, 140, 210, 280, 350};
        String[] label = {"优", "良", "轻度", "中度", "重度", "严重"};
        for (int i = 0; i < value.length; i++) {
            AxisValue v = new AxisValue(value[i]);
            v.setLabel(label[i]);
            yAxisValue.add(v);
        }

        axisY = new Axis(yAxisValue)
                .setHasSeparationLine(false)
                .setHasLines(false)
                .setAutoGenerated(false)
                .setMaxLabelChars(4);
    }

    public void setData(List<CaqColumnData> data){
        List<Column> columns = new ArrayList<Column>();
        List<AxisValue> xAxisValue = new ArrayList<AxisValue>();

        List<SubcolumnValue> values;
        for (int i = 0; i < data.size(); i++){
            values = new ArrayList<SubcolumnValue>();
            values.add(new SubcolumnValue(data.get(i).getValue(), ChartUtils.COLOR_BLUE));
            Column column = new Column(values);
            column.setHasLabels(false);
            column.setHasLabelsOnlyForSelected(false);
            columns.add(column);

            AxisValue v = new AxisValue(i);
            v.setLabel(data.get(i).getLabel());
            xAxisValue.add(v);
        }

        Axis axisX = new Axis(xAxisValue).setHasSeparationLine(false);
        chartData.setAxisXBottom(axisX);
        chartData.setColumns(columns);

        setColumnChartData(chartData);
        previewX(true);
    }

    private void previewX(boolean animate) {
        Viewport tempViewport = new Viewport(getMaximumViewport());
        //tempViewport.inset(0, tempViewport.height());
        setCurrentViewport(tempViewport);
    }

}
